package my.mma.security.filter;import jakarta.servlet.FilterChain;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.extern.slf4j.Slf4j;import my.mma.security.entity.Refresh;import my.mma.security.repository.RefreshRepository;import my.mma.security.JWTUtil;import org.springframework.http.HttpStatus;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import java.util.Collection;import java.util.Iterator;import java.util.UUID;@Slf4jpublic class LoginFilter extends UsernamePasswordAuthenticationFilter {    private final AuthenticationManager authenticationManager; // 구현체 : ProviderManager    private final JWTUtil jwtUtil;    private final RefreshRepository refreshRepository;    public LoginFilter(AuthenticationManager authenticationManager,JWTUtil jwtUtil,RefreshRepository refreshRepository) {        this.authenticationManager = authenticationManager;        this.jwtUtil = jwtUtil;        this.refreshRepository = refreshRepository;    }    @Override    protected String obtainUsername(HttpServletRequest request) {        return request.getParameter("email");    }    @Override    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {        log.info("LoginFilter attemptAuthentication execute");        //클라이언트 요청에서 username, password 추출        String email = obtainUsername(request);        String password = obtainPassword(request);        log.info("email={}",email);        //스프링 시큐리티에서 username과 password를 검증하기 위해서는 token에 담아야 함        UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(email, password, null);//        log.info("manager={}",authenticationManager);//        log.info("token={}",authToken);        //token에 담은 검증을 위한 AuthenticationManager로 전달        return authenticationManager.authenticate(authToken);    }    //로그인 성공시 실행하는 메소드 (여기서 JWT를 발급하면 됨)    @Override    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authentication) {        String username = authentication.getName();        log.info("username={}",username);        Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();        Iterator<? extends GrantedAuthority> iterator = authorities.iterator();        GrantedAuthority auth = iterator.next();        String role = auth.getAuthority();        String access = jwtUtil.createJwt("access", username, role, 600000L);        String refresh = jwtUtil.createJwt("refresh", username, role, 86400000L);        addRefreshEntity(username,refresh,86400000L);        response.setHeader("Authorization","Bearer "+access);        response.setHeader("refresh",refresh);        response.setStatus(HttpStatus.OK.value());    }//    private Cookie createCookie(String key, String value) {//        Cookie cookie = new Cookie(key, value);//        cookie.setMaxAge(24*60*60);//        cookie.setHttpOnly(true); //자바스크립트로 접근 금지//        return cookie;//    }    private void addRefreshEntity(String username,String refresh,Long expiredMs){        refreshRepository.save(Refresh.builder()                .id(UUID.randomUUID().toString())                .username(username)                .token(refresh)                .expiration(expiredMs)                .build());    }    //로그인 실패시 실행하는 메소드    @Override    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) {        log.info("failed");        response.setStatus(401);    }}